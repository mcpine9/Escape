// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace EscapeMobility.Controllers
{
    public partial class InformationController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public InformationController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected InformationController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public InformationController Actions { get { return MVC.Information; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Information";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Information";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string CompanyInfo = "CompanyInfo";
            public readonly string Innovation = "Innovation";
            public readonly string References = "References";
            public readonly string Events = "Events";
            public readonly string History = "History";
            public readonly string Brochures = "Brochures";
            public readonly string WorldwideDistribution = "WorldwideDistribution";
            public readonly string DistributorsWanted = "DistributorsWanted";
            public readonly string News = "News";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string CompanyInfo = "CompanyInfo";
            public const string Innovation = "Innovation";
            public const string References = "References";
            public const string Events = "Events";
            public const string History = "History";
            public const string Brochures = "Brochures";
            public const string WorldwideDistribution = "WorldwideDistribution";
            public const string DistributorsWanted = "DistributorsWanted";
            public const string News = "News";
        }


        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Brochures = "Brochures";
                public readonly string DistributorsWanted = "DistributorsWanted";
                public readonly string Events = "Events";
                public readonly string History = "History";
                public readonly string Index = "Index";
                public readonly string Innovation = "Innovation";
                public readonly string MainLeftMenu = "MainLeftMenu";
                public readonly string News = "News";
                public readonly string References = "References";
                public readonly string WorldwideDistribution = "WorldwideDistribution";
            }
            public readonly string Brochures = "~/Views/Information/Brochures.cshtml";
            public readonly string DistributorsWanted = "~/Views/Information/DistributorsWanted.cshtml";
            public readonly string Events = "~/Views/Information/Events.cshtml";
            public readonly string History = "~/Views/Information/History.cshtml";
            public readonly string Index = "~/Views/Information/Index.cshtml";
            public readonly string Innovation = "~/Views/Information/Innovation.cshtml";
            public readonly string MainLeftMenu = "~/Views/Information/MainLeftMenu.cshtml";
            public readonly string News = "~/Views/Information/News.cshtml";
            public readonly string References = "~/Views/Information/References.cshtml";
            public readonly string WorldwideDistribution = "~/Views/Information/WorldwideDistribution.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_InformationController : EscapeMobility.Controllers.InformationController
    {
        public T4MVC_InformationController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void CompanyInfoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult CompanyInfo()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CompanyInfo);
            CompanyInfoOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void InnovationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Innovation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Innovation);
            InnovationOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ReferencesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult References()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.References);
            ReferencesOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void EventsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Events()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Events);
            EventsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void HistoryOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult History()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.History);
            HistoryOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void BrochuresOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Brochures()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Brochures);
            BrochuresOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void WorldwideDistributionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult WorldwideDistribution()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WorldwideDistribution);
            WorldwideDistributionOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void DistributorsWantedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult DistributorsWanted()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DistributorsWanted);
            DistributorsWantedOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void NewsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult News()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.News);
            NewsOverride(callInfo);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591
