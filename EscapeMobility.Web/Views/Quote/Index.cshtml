@using Recaptcha.Web.Mvc
@model EscapeMobility.Web.Models.QuoteViewModel
@{
    ViewBag.Title = "Quote";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section pagebreadcrumbs
{
    <div id="breadcrumbs">
        @Html.ActionLink("Home", MVC.Home.Index(), null)
        @ViewBag.Title
    </div>
}
@section pagecss
{
    <link href="~/Content/styles/app/basket.1015101831.css" type="text/css" rel="stylesheet">
    <link href="~/Content/styles/app/formstyle.css" type="text/css" rel="stylesheet">
}
<div id="leftMenu">
    <ul></ul>
</div>

<div id="mainContent" data-curpage="contact">
    <h1 class="pageTitle">Request a Quote</h1>
    <div class="clear"></div>
    <p>
        Please fill in the form below to complete your request for a quotation. One of our product advisers may contact you by telephone, in order to discuss the quotation with you. <br>
        <h2>Request for a quotation, what happens next?</h2>
        <strong>1.</strong> After you have submitted your request for a quote, it will be handled by one of our product advisors.<br>
        <strong>2.</strong>&nbsp;Depending on the products you have requested in your quotation, we will contact you to give you further technical information about these products. <br>
        <strong>3.</strong> Based on this information, we will send you a customised quotation by Email or post.<br>
        <br>
        <table style="BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid" bordercolor=#7f7f7f cellpadding=5>
            <tbody>
                <tr>
                    <td>
                        <span style="FONT-SIZE: 11px">
                            This form is intended for customers located in the USA only. <br>
                            Please visit @Html.ActionLink("this page", MVC.Information.WorldwideDistribution()) when you are located outside the USA.
                        </span>
                    </td>
                </tr>
            </tbody>
        </table>
        <br>
        <strong>All prices on this website are based on the standard prices and are exclusive of Tax, packaging and transport costs. You will receive a detailed quotation, that will&nbsp;include all costs, as itemised.</strong>
    </p>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div id="form">
    @{
    if (Model.ShoppingCart.CartItems.Any())
    {
        <div class="formTitle">
            Items
        </div>
        <table id="wmTable">
            <thead>
                <tr>
                    <th scope="col" id="wmItemAmount">Amount</th>
                    <th scope="col" id="wmItemPrice">Price per piece</th>
                    <th scope="col" id="wmItemDesc">Description</th>
                    <th scope="col" id="wmItemNumber">Article Number</th>
                    <th scope="col" id="wmItemRemove">Remove</th>
                </tr>
            </thead>
            <tbody>

                @{
                    for (int i = 0; i < Model.ShoppingCart.CartItems.Count; i++)
                    {

                        {

                            <tr data-language="" data-pid="53">
                                <td>
                                    <div class="formData fdInputSmall">
                                        @Html.EditorFor(model => model.ShoppingCart.CartItems[i].Quantity)
                                    </div>
                                </td>
                                <td>x $@Model.ShoppingCart.CartItems[i].Product.Price</td>
                                <td>@Model.ShoppingCart.CartItems[i].Product.Title</td>
                                <td>@Model.ShoppingCart.CartItems[i].Product.ArticleNumber</td>
                                <td>
                                    <a class="removeButton"></a>
                                    @Html.HiddenFor(model => model.ShoppingCart.CartItems[i].ProductID)
                                </td>
                            </tr>
                            <tr>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                                <td colspan="2" class="priceExVat">Prices are excl. Tax</td>
                            </tr>

                        }
                    }
                }
            </tbody>

    </table>
        }
    }

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new {@class = "text-danger"})

                @{
                    if (ViewBag.ContactExistsMessage != null)
                    {
                        <span class="field-validation-error text-danger">@Html.Raw(ViewBag.ContactExistsMessage.ToString())</span>
                        
                    }
                }
                @Html.HiddenFor(model => model.ShoppingCart.DateCreated)
                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FirstName, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.FirstName, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MiddleName, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.MiddleName, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.MiddleName, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LastName, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.LastName, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Title, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Company, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Company, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Company, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Email, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Phone, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Phone, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Address1, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address1, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Address1, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Address2, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address2, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Address2, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.City, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.City, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.City, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.State, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.State, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.State, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Zip, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Zip, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Zip, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Comments, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Comments, new {@class = "form-control", columns = 50, rows = 5})
                        @Html.ValidationMessageFor(model => model.Comments, "", new {@class = "text-danger"})
                    </div>
                </div>
                @Html.Recaptcha()
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Submit" class="btn btn-default" />
                    </div>
                </div>


            </div>
        
    </div>
}
</div>